#!/usr/bin/env nextflow

// ### PLEASE CHECK THE COMMENTS AND COMMENTED LINES IN THE SCRIPTS or SHELLS BLOCKS ###


// tm = tranmembrane
// om = Original model
// M3 = mark three third model created of the phobius model
// ns = negatie set
// ps = positive set TANGO1 proteins not used for the training of the model
// fs = frequency setthe TANGO1 proteins used for the assestment of the frequency of aa this prot are excluded from the positive set
// pred = prediction



/*
*  this module takes as input a short prediction phobius output file (simple redirection of stdout)
*  that has the following structure (space separated)
*       UniRef50_A0A5J4NZG1             2  Y n15-25c30/31o1387-n-1403i1415-n-1437o
*       UniRef50_W7A840                 1  0 o1786-n-1803i
*  where each line is the prediction for a specifi protein
*  it also takes as input the fasta file that generated such prediction (it needs to have the sequence on one line)
*  check the fasta_oneliner.nf script if you need
*  and as final input file there is the plp or multiplp generated by phobius in accordance with the txt and fasta file mentioned
*  basically the run of phobius short output with plp for the multifasta file, a fasta a txt a plp all in the same order
*  the multiplp file have to have this structure where every sequence prediction plp is separated by two line like this :
*       # sp|Q8BI84|TGO1_MOUSE
*       #pos    aa      i       o       M       S       m       l
*  where the first comment line contains the id present in the line of the txt.
*  The files following computes different phisichal properties based on the modules that are integrated,
*  check the include section of the script to know them all 
*  the --KEYWORD option serves to specify a special label prediction on which compute the properties based on the txt file,
*  however if it is specified    allM7   or  allOM   as arguments of the above option it will compute them for the whole protein
*  separating the eventual laabels found in each protein prediction on different output lines
*/


nextflow.enable.dsl=2

params.help = false


// this prints the help in case you use --help parameter in the command line and it stops the pipeline
if (params.help) {
        log.info 'This is the help section of this pipeline'
       	log.info 'Here is a brief description of the pipeline itself  : '
        log.info '	this module takes as input a short prediction phobius output file (simple redirection of stdout)'
        log.info '      --INPUT_TXT option, that has the following structure (space separated)'
        log.info '           UniRef50_A0A5J4NZG1             2  Y n15-25c30/31o1387-n-1403i1415-n-1437o'
        log.info '           UniRef50_W7A840                 1  0 o1786-n-1803i'
        log.info '      where each line is the prediction for a specifi protein'
        log.info '      it also takes as input the fasta file that generated such prediction (it needs to have the sequence on one line)'
        log.info '      --INPUT_FASTA option, check the fasta_oneliner.nf script if you need'
        log.info '      and as final input file there is the plp or multiplp generated by phobius in accordance with the txt and fasta file mentioned'
        log.info '	--INPUT_PLP option'
        log.info '      basically the run of phobius short output with plp for the multifasta file, a fasta a txt a plp all in the same order'
        log.info '	check the phobius_parallelization.nf script for more option'
        log.info '      the multiplp file have to have this structure where every sequence prediction plp is separated by two line like this :'
        log.info '           # sp|Q8BI84|TGO1_MOUSE'
        log.info '           #pos    aa      i       o       M       S       m       l'
        log.info '      where the first comment line contains the id present in the line of the txt.'
        log.info '      The files following computes different phisichal properties based on the modules that are integrated,'
        log.info '      check the include section of the script to know them all'
        log.info '	the --KEYWORD option serves to specify a special label prediction on which compute the properties based on the txt file,'
        log.info '	however if it is specified    allM7   as argument of the above option it will compute them for the whole protein'
        log.info '	where M7 stands for the labeling of the post mark7 phobius models and    allOM    is the correspondant for orginal phobius'
        log.info '	it separates the eventual laabels found in each protein prediction on different output lines'
        log.info '	all possible combination of labels are allowed and the labels are the following:'
        log.info '	the allowed keywords are: [c, i, o, -, n, s, l]  c = signal peptide, i = inside membrane(cytoplasm),'
        log.info '	o = outside membrane, - = helix (in phobius originalmodel), (only in phobius-M7or later) => -n- = normal-helix'
        log.info '	-s- = special-helix and -l- = loop-inramembrane'
        log.info '	they have to be given like this:'
        log.info '		--KEYWORD s,n,c    or  i,l,\\-'
        log.info '\n'
}


params.CONTAINER = "alessiovignoli3/tango-project:python_field_retr@sha256:36cc270916232308969735637dba81b775916b2d221a811ec13dec597296fe0b"
params.OUTPUT_DIR = "${params.TEST_DIR}"
params.INPUT_TXT = "${params.OUTPUT_DIR}test19_1.txt"
params.INPUT_FASTA =  "${params.OUTPUT_DIR}test18_1.fasta"
params.INPUT_PLP = "${params.TEST_DIR}bubbabubba"
params.KEYWORD = false
params.MAX_ITER = 9999999999
params.HYDRO_SCALE = "kyte"


// Modules dependencie section

// this computes Hydrophobicity
include { average_hydrophobicity } from "${params.PIPES}hydrophobicity_fasta_short_pred.nf" addParams(MAX_ITER: "${params.MAX_ITER}")
// this computes the average plp
include { short_pred_average_plp  } from "${params.PIPES}average_plp_short_pred.nf" addParams(MAX_ITER: "${params.MAX_ITER}")



workflow properties_computer_i {

	take:
	pattern_to_txt
	pattern_to_fastas
	pattern_to_plp
	field_keyword

	main:
	hydro_cyto = average_hydrophobicity(pattern_to_txt, pattern_to_fastas, field_keyword)
	hydro_cyto.finalavghydro.view()
	average_plp_cyto = short_pred_average_plp(pattern_to_txt, pattern_to_plp, field_keyword)
	average_plp_cyto.finalaverage.view()
}

workflow properties_computer_n {

	take:
	pattern_to_txt
	pattern_to_fastas
	pattern_to_plp
	field_keyword

	main:
	hydro_normal = average_hydrophobicity(pattern_to_txt, pattern_to_fastas, field_keyword)
	hydro_normal.finalavghydro.view()
	average_plp_normal = short_pred_average_plp(pattern_to_txt, pattern_to_plp, field_keyword)
	average_plp_normal.finalaverage.view()
}

workflow properties_computer_s {

	take:
	pattern_to_txt
	pattern_to_fastas
	pattern_to_plp
	field_keyword

	main:
	hydro_special = average_hydrophobicity(pattern_to_txt, pattern_to_fastas, field_keyword)
	hydro_special.finalavghydro.view()
	average_plp_special = short_pred_average_plp(pattern_to_txt, pattern_to_plp, field_keyword)
	average_plp_special.finalaverage.view()
}

workflow {
	list_of_labels = ''
	if ( "${params.KEYWORD}"=="allM7" ) {
		list_of_labels = [ 'c', 'i', 'o', 'n', 's', 'l' ]
	} else 
	
	if("${params.KEYWORD}"=="allOM") {
		list_of_labels = [ 'c', 'i', 'o', '-', 's', 'l' ]
	} else {
		tmp_list_of_labels = "${params.KEYWORD}".split(',')
		list_of_labels  = Arrays.asList(tmp_list_of_labels)
	}
	//println(list_of_labels)
	//println(list_of_labels.getClass())
	if (list_of_labels.contains('c')) {
		properties_computer_c(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, 'c')
        }
	if (list_of_labels.contains('i')) {
		properties_computer_i(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, 'i')
	}
	if (list_of_labels.contains('o')) {
		properties_computer_o(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, 'o')
	}
	if (list_of_labels.contains('-')) {
                properties_computer_-(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, '-')
        }
	if (list_of_labels.contains('n')) {
		properties_computer_n(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, 'n')
	}
	if (list_of_labels.contains('s')) {
		properties_computer_s(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, 's')
	}
	if (list_of_labels.contains('l')) {
                properties_computer_l(params.INPUT_TXT, params.INPUT_FASTA, params.INPUT_PLP, 'l')
        }
	
}
